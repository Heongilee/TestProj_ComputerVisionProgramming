# ------------------------------------------------------------------------------------------
# numpy importing...
import numpy as np
# ------------------------------------------------------------------------------------------
# # 단일 Numpy 객체 저장과 불러오기
# array = np.arange(0, 10)
# np.save('saved.npy', array) # 이진파일 형태로 저장됨.

# result = np.load('saved.npy')
# print(result)
# ------------------------------------------------------------------------------------------
# # 복수 Numpy 객체 저장과 불러오기
# arr1 = np.arange(0, 10)
# arr2 = np.arange(10, 20)

# np.savez('saved.npz', arr1 = arr1, arr2= arr2)

# data = np.load('saved.npz')
# result1 = data['arr1']
# result2 = data['arr2']

# print(result1)
# print(result2)
# ------------------------------------------------------------------------------------------
# # Numpy원소 오름차순(Default) 정렬
# # 정렬 확장 정리 : https://rfriend.tistory.com/357

# arr1 = np.array([5, 8, 6, 4, 9])
# print(arr1)

# arr1.sort()

# print(arr1) # ASC sorting
# print(arr1[::-1]) ##DESC sorting :: 인덱싱 기법.
# ------------------------------------------------------------------------------------------
# # 각 열을 기준으로 정렬
# arr1 = np.random.randint(0, 20, size=10).reshape(2, 5)
# print(arr1)

# arr1.sort(axis = 1)
# print(arr1)
# ------------------------------------------------------------------------------------------
# # 균일한 간격으로 데이터 생성
# arr = np.linspace(0, 10, 5)
# print(arr)

# # 난수의 재연(실행 결과 마다 동일)
# np.random.seed(7)
# print(np.random.randint(0, 10, (2, 3)))
# ------------------------------------------------------------------------------------------
# # Numpy 배열 객체 (주소)복사
# arr1 = np.arange(0, 10)
# arr2 = arr1 # 주소를 복사하기 때문에 arr1의 값 또한 바뀌었다는것을 알 수 있다.
# arr2[0] = 99
# print('arr1', arr1)

# # Numpy 배열 객체 (값)복사
# arr3 = np.arange(10, 20)
# arr4 = arr3.copy()
# arr4[0] = 99
# print('arr3', arr3)
# print('arr4', arr4)
# ------------------------------------------------------------------------------------------
# 중복된 원소 제거.
arr = np.array([1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5])
print(np.unique(arr))
# ------------------------------------------------------------------------------------------